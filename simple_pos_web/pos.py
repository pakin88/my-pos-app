import streamlit as st
import pandas as pd
from datetime import datetime
from streamlit_option_menu import option_menu
income_file = "income.csv"
expense_file = "expense.csv"
stock_file = "stock.csv"
st.set_page_config(
    page_title="POS ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢",   # ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
    page_icon="üíµ",                     # ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏ß‡πá‡∏ö
    layout="centered"                  # ‡∏´‡∏£‡∏∑‡∏≠ "wide"
)

# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ

def load_stock(file):
    try:
        return pd.read_csv(file, encoding='utf-8-sig')
    except FileNotFoundError:
        return pd.DataFrame(columns=[ "item", "price"])    


def load_data(file):
    try:
        return pd.read_csv(file, encoding='utf-8-sig')
    except FileNotFoundError:
        return pd.DataFrame(columns=["date", "item", "amount"])


# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV
def save_data(file, df):
    df.to_csv(file, index=False, encoding='utf-8-sig')


col1, col2 = st.columns([5, 10])

with col1:
    st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    menu = st.sidebar = option_menu(
            "‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å", 
            ["‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"],
            icons=["speedometer", "plus", "cash-stack", "credit-card"],
            menu_icon="cast", default_index=0
        
    )
with col2:

    if menu == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
        st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
        item = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",key = "input_item")
        price = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤", min_value=0,key = "input_price")
        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"):
            df = load_stock(stock_file)
            df.loc[len(df)] = [item, price]
            save_data(stock_file, df)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

    if menu == "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö":
        st.subheader("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

        stock_df = load_stock(stock_file)
        item_names = stock_df["item"].tolist()

        selected_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", item_names)
        qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢", min_value=1, key="sell_qty")

        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"):
            price = stock_df.loc[stock_df["item"] == selected_item, "price"].values[0]
            total = price * qty

            df = load_data(income_file)
            df = df.reset_index(drop=True)
            df.index += 1
            df.index.name = "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
            df.loc[len(df)] = [datetime.now().strftime("%Y-%m-%d %H:%M:%S"), selected_item, total]
            save_data(income_file, df)

            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö {selected_item} x {qty} = {total} ‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß")


    if menu == "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢":
        st.subheader("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")

        stock_df = load_stock(stock_file)
        item_names = stock_df["item"].tolist()

        selected_item = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", item_names, key="expense_item")
        qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠", min_value=1, key="buy_qty")

        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"):
            price = stock_df.loc[stock_df["item"] == selected_item, "price"].values[0]
            total = price * qty

            df = load_data(expense_file)

            df.loc[len(df)] = [datetime.now().strftime("%Y-%m-%d %H:%M:%S"), selected_item, total]
            save_data(expense_file, df)

            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ {selected_item} x {qty} = {total} ‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß")

    if menu == "‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î":
        st.subheader("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")


        income_df = load_data(income_file)
        expense_df = load_data(expense_file)

        total_income = income_df["amount"].sum()
        total_expense = expense_df["amount"].sum()

        st.metric("‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
        st.metric("‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°", f"{total_expense:,.2f} ‡∏ö‡∏≤‡∏ó")
        st.metric("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", f"{total_income - total_expense:,.2f} ‡∏ö‡∏≤‡∏ó")

        st.markdown("### üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
        income_df = income_df.reset_index(drop=True)
        income_df.index += 1
        income_df.index.name = "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
        st.dataframe(income_df)

        st.markdown("### üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
        expense_df = expense_df.reset_index(drop=True)
        expense_df.index += 1
        expense_df.index.name = "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
        st.dataframe(expense_df)

    if menu == "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î":
        st.subheader("üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö POS")
        
        income_df = load_data(income_file)
        expense_df = load_data(expense_file)
        stock_df = load_stock(stock_file)

        total_income = income_df["amount"].sum()
        total_expense = expense_df["amount"].sum()
        net_profit = total_income - total_expense

        col1, col2, col3 = st.columns(3)
        col1.metric("üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_income:,.2f} ‡∏ö‡∏≤‡∏ó")
        col2.metric("üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_expense:,.2f} ‡∏ö‡∏≤‡∏ó")
        col3.metric("üìà ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥", f"{net_profit:,.2f} ‡∏ö‡∏≤‡∏ó", delta=f"{net_profit:,.2f}")

        st.markdown("### üõçÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á")
        st.write(f"‡∏£‡∏ß‡∏° {len(stock_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        st.markdown("### üìÜ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        income_df["date"] = pd.to_datetime(income_df["date"]).dt.date
        expense_df["date"] = pd.to_datetime(expense_df["date"]).dt.date

        income_daily = income_df.groupby("date")["amount"].sum()
        expense_daily = expense_df.groupby("date")["amount"].sum()

        daily_df = pd.DataFrame({
            "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": income_daily,
            "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": expense_daily
        }).fillna(0)

        st.line_chart(daily_df)

        st.markdown("### üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        st.write("**‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:**")
        st.dataframe(income_df.tail(5).reset_index(drop=True))

        st.write("**‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:**")
        st.dataframe(expense_df.tail(5).reset_index(drop=True))
